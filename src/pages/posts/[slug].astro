---
import * as interfaces from '../../lib/interfaces.ts'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import styles from '../../styles/blog.module.css'
import TableOfContentsOfAside from '../../components/TableOfContentsOfAside.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch {
          console.log('Invalid file URL: ', (block.Image || block.File)?.File?.Url)
          return Promise.reject()
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site)
}

// H1~H3タグを取得
const headings = blocks.filter((b: interfaces.Block) =>
  ['heading_1', 'heading_2', 'heading_3'].includes(b.Type)
)
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main" class={styles.main}>
    <div class={styles.post}>
      <PostDate post={post} />
      <PostTags post={post} />
      <PostTitle post={post} enableLink={false} />
      <PostBody blocks={blocks} />
      <PostTags post={post} />

      <footer>
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </div>
  </div>

  <div client: slot="aside" class={styles.aside} id="aside_navigation">
    <div id="table_of_contents"><TableOfContentsOfAside headings={headings}/></div>
    <BlogPostsLink
      heading="Posts in the same category"
      posts={postsHavingSameTag.filter(
        (p: interfaces.Post) => p.Slug !== post.Slug
      )}
    />
<!--
    <BlogPostsLink heading="Recommended" posts={rankedPosts} />
    <BlogPostsLink heading="Latest posts" posts={recentPosts} />
-->
    <BlogTagsLink heading="Categories" tags={tags} />
  </div>
</Layout>

<script>
  const aside_navigation = document.getElementById('aside_navigation');
  let offsetTop = aside_navigation.offsetTop;

  function updateContentsTable(){
    if( aside_navigation.offsetTop != 0)offsetTop = aside_navigation.offsetTop;
    if (window.scrollY >= offsetTop) {
      aside_navigation.classList.add('fixed');
    } else {
      aside_navigation.classList.remove('fixed');
    }
  }
  updateContentsTable();

  // 画面サイズとスクロールイベントが発生した時に、コンテンツテーブルを更新する。
  ['resize', 'scroll'].forEach((eventType) =>{
    window.addEventListener(eventType, () => {
      updateContentsTable();
    })
  })
</script>

<style>
  #table_of_contents{
  }
  @media (max-width: 640px) {
    #table_of_contents{
      display: none;
    }
  }

  #aside_navigation {
    position: relative;
    top: 0;
    transition: all 0.3s ease;
  }
  #aside_navigation.fixed {
    position: fixed;
    right: 20px; /* 右側の余白を手動で指定 */
    top: 0px; /* ヘッダーの高さ */
    width: 260px; /* Layout.astroでasideの幅が300px、左右パディングが20pxずつある為、300 - 20 - 20 = */
  }
  @media (max-width: 640px) {
    #aside_navigation.fixed {       
      position: relative;
      top: 0;
      transition: all 0.3s ease;
    }
  }
</style>
