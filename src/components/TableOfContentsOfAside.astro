---
import * as interfaces from '../lib/interfaces.ts'
import { buildHeadingId } from '../lib/blog-helpers.ts'
import { snakeToKebab } from '../lib/style-helpers.ts'
import '../styles/notion-color.css'

export interface Props {
  headings: interfaces.Block[]
}

const { headings } = Astro.props
---

<div class="table-of-contents-aside">
  {
    headings.map((headingBlock: interfaces.Block) => {
      const heading =
        headingBlock.Heading1 || headingBlock.Heading2 || headingBlock.Heading3

      let indentClass = ''
      if (headingBlock.Type === 'heading_2') {
        indentClass = 'indent-1'
      } else if (headingBlock.Type === 'heading_3') {
        indentClass = 'indent-2'
      }

      return (
        <a
          href={`#${buildHeadingId(heading)}`}
          class={`table-of-content-aside ${indentClass}`}>
          {heading.RichTexts.map(
            (richText: interfaces.RichText) => richText.PlainText
          ).join('').trim()}
        </a>
      )
    })
  }
</div>

<script>
  // 記事内のHeader一覧
  const headerElements = document.querySelectorAll('.post-body h3, .post-body h4, .post-body h5');
  // 表示中Headerの基準Y座標
  const baseTopY = window.innerHeight * 0.2;
  // フォーカス位置の初期化
  function initFocusedElement(){
    let tmpHeaderElement = null;
    for(const headerElement of headerElements){
      // 一番最初のタグを初期位置に設定する。
      if(tmpHeaderElement == null){
        tmpHeaderElement = headerElement;
      }else{
        // ２つの要素のY座標取得
        let tmpHeadlerTopY = tmpHeaderElement.getBoundingClientRect().top - baseTopY;
        let headerTopY = headerElement.getBoundingClientRect().top - baseTopY;
        // 基準座標に近い要素を選択する
        tmpHeaderElement = Math.abs(tmpHeadlerTopY) < Math.abs(headerTopY) ? tmpHeaderElement : headerElement;
      }
    }

    if( tmpHeaderElement != null){
      // <b>や<i>などのタグに、テキストが囲われている場合は、最下要素まで移動する
      while( tmpHeaderElement.childElementCount > 0){  
        tmpHeaderElement = tmpHeaderElement.children[0];
      }

      // 目次を構成する要素からフォーカスする要素を探し、フォーカスを切り替える。
      const headingText = tmpHeaderElement.innerHTML;
      if(headingText != null){
        for(const element of elements){
          if( element.innerHTML.trim() === headingText.trim() ){
            switchFocusedElement(element);
            return;
          }
        }
      }
    }
  }

  var focusedElement : Element; 
  //フォーカスの切り替え
  function switchFocusedElement(nextElem : Element){
    if(focusedElement != null)focusedElement.style.backgroundColor = '';
    focusedElement = nextElem;
    focusedElement.style.backgroundColor = '#f5deb3';
  }

    // 目次一覧を取得
  const elements = document.getElementsByClassName("table-of-content-aside");
  function initEventListener(){
    // IntersectionObserverに記事ヘッダーを登録
    headerElements.forEach(elem => {
      observer.observe(elem);
    });
  }

  // IntersectionObserver作成
  const observer = new IntersectionObserver((entries) => {
    // イベントを起こしたテキストを取得する。
    var headingText = null;
    for(var tmpEntry of entries){
      if(tmpEntry.isIntersecting) {
        var element = tmpEntry.target;

        while( element.childElementCount > 0){
          // <b>や<i>などのタグに、テキストが囲われている場合は、最下要素まで移動する
          element = element.children[0];
        }

        headingText = element.innerHTML;
        break;
      }
    }

    // 目次を構成する要素と、すべて比較。一致したら強調表示を切り替えて終了。
    if(headingText != null){
      for(const element of elements){
        if( element.innerHTML.trim() === headingText.trim() ){
          // ボタンの強調を切り替える
          switchFocusedElement(element)
          return;
        }
      }
    }
  }, {
    rootMargin: '0px 0px -80% 0px', // 上部に来たときに発火
  });

  // 初期化
  initEventListener();
  initFocusedElement();
</script>

<style>
  .table-of-contents-aside {
  }

  .table-of-contents-aside > a {
    display: block;
    line-height: 1.8rem;
    font-size: 0.9rem;
    font-weight: 500;
    text-decoration: underline;
  }
  .table-of-contents-aside > a:hover {
    background: rgba(241, 241, 239, 1) !important;
  }
  .table-of-contents-aside > a.indent-1 {
    padding-left: 1.5rem;
    font-size: 0.8rem;
  }
  .table-of-contents-aside > a.indent-2 {
    padding-left: 3rem;
    font-size: 0.7rem;
  }
</style>
