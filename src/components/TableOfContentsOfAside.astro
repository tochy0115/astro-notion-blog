---
import * as interfaces from '../lib/interfaces.ts'
import { buildHeadingId } from '../lib/blog-helpers.ts'
import { snakeToKebab } from '../lib/style-helpers.ts'
import '../styles/notion-color.css'

export interface Props {
  headings: interfaces.Block[]
}

const { headings } = Astro.props
---

<div class="table-of-contents-aside">
  {
    headings.map((headingBlock: interfaces.Block) => {
      const heading =
        headingBlock.Heading1 || headingBlock.Heading2 || headingBlock.Heading3

      let indentClass = ''
      if (headingBlock.Type === 'heading_2') {
        indentClass = 'indent-1'
      } else if (headingBlock.Type === 'heading_3') {
        indentClass = 'indent-2'
      }

      return (
        <a
          href={`#${buildHeadingId(heading)}`}
          class={`table-of-content-aside ${indentClass}`}>
          {heading.RichTexts.map(
            (richText: interfaces.RichText) => richText.PlainText
          ).join('').trim()}
        </a>
      )
    })
  }
</div>

<script>
  var focusedElement : Element; //現在フォーカス中の項目
  function switchFocusedElement(nextElem : Element){
    if(focusedElement != null)focusedElement.style.fontWeight = 'normal';
    focusedElement = nextElem;
    focusedElement.style.fontWeight = 'bold';
  }

  // 目次一覧を取得
  const elements = document.getElementsByClassName("table-of-content-aside");
  for(const element of elements){
    element.addEventListener('click', () => {
        switchFocusedElement(element)
    });

    // 一番最初のタグを初期位置に設定する。
    if(focusedElement == null){
      switchFocusedElement(element);
    }
  }

  const observer = new IntersectionObserver((entries) => {
    // 現在、画面にあるHタグのテキストを取得する。
    var headingText = null;
    for(var tmpEntry of entries){
      if(tmpEntry.isIntersecting) {
        var element = tmpEntry.target;

        while( element.childElementCount > 0){
          // <b>や<i>などのタグに、テキストが囲われている場合は、最下要素まで移動する
          element = element.children[0];
        }

        headingText = element.innerHTML;
        break;
      }
    }

    // 目次を構成する要素と、すべて比較。一致したら強調表示を切り替えて終了。
    if(headingText != null){
      for(const element of elements){
        if( element.innerHTML.trim() === headingText.trim() ){
          // ボタンの強調を切り替える
          switchFocusedElement(element)
          return;
        }
      }
    }
  }, {
    rootMargin: '0px 0px -100% 0px', // 上部に来たときに発火
  });

  document.querySelectorAll('h3,h4,h5').forEach(el => {
    observer.observe(el);
  });
</script>

<style>
  .table-of-contents-aside {
  }

  .table-of-contents-aside > a {
    display: block;
    line-height: 1.8rem;
    font-size: 0.9rem;
    font-weight: 500;
    text-decoration: underline;
  }
  .table-of-contents-aside > a:hover {
    background: rgba(241, 241, 239, 1) !important;
  }
  .table-of-contents-aside > a.indent-1 {
    padding-left: 1.5rem;
  }
  .table-of-contents-aside > a.indent-2 {
    padding-left: 3rem;
  }
</style>
